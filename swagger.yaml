---
swagger: "2.0"
info:
  description:
    "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.5"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
  - name: "pet"
    description: "Everything about your Pets"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "store"
    description: "Access to Petstore orders"
  - name: "user"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /myTrainers:
    get:
      security:
        - Authorization: []
      summary: Get trainers associated with the authenticated visitor
      description: Retrieve the trainers associated with the sessions booked by the authenticated visitor.
      responses:
        "200":
          description: Successfully retrieved the list of trainers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trainer"
        "400":
          description: Bad request or visitor not booked with any sessions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the reason.
        "404":
          description: Visitor not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the reason.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the server error.
      examples:
        RequestExample:
          summary: Example request for retrieving trainers
        ResponseExample:
          summary: Example response for retrieving trainers
          value:
            - name: "Trainer 1"
              specialty: "Fitness"
            - name: "Trainer 2"
              specialty: "Yoga"
  /mySessions:
    get:
      security:
        - Authorization: []
      summary: Get sessions booked by the authenticated visitor
      description: Retrieve the sessions booked by the authenticated visitor.
      responses:
        "200":
          description: Successfully retrieved the list of sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Session"
        "400":
          description: Bad request or visitor has not booked any sessions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the reason.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the server error.
      examples:
        RequestExample:
          summary: Example request for retrieving sessions
        ResponseExample:
          summary: Example response for retrieving sessions
          value:
            - date: "2023-10-10"
              time: "10:00 AM"
              trainer: "Trainer 1"
            - date: "2023-10-11"
              time: "3:00 PM"
              trainer: "Trainer 2"
  /book/{sessionId}:
    post:
      security:
        - Authorization: []
      summary: Book a session
      description: Book a session for the authenticated visitor.
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
          description: The ID of the session to book.
      responses:
        "200":
          description: Successfully booked the session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "400":
          description: Bad request or session is already booked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the reason.
        "404":
          description: Session not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the reason.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the server error.
      examples:
        RequestExample:
          summary: Example request for booking a session
          parameters:
            sessionId: "session123"
        ResponseExample:
          summary: Example response for booking a session
          value:
            date: "2023-10-10"
            time: "10:00 AM"
            trainer: "Trainer 1"
            paths:
components:
  schemas:
    Session:
      type: object
      properties:
        date:
          type: string
          format: date
          description: The date of the session.
        time:
          type: string
          description: The time of the session.
        trainer:
          type: string
          description: The name of the trainer for the session.
    Trainer:
      type: object
      properties:
        name:
          type: string
          description: The name of the trainer.
        specialty:
          type: string
          description: The specialty of the trainer.
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
