---
swagger: "2.0"
info:
  description:
    "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  title: "Swagger Gym Api"
  version: "1.0.0"
host: "908a-213-109-80-222.ngrok-free.app"
schemes:
  - "https"
  - "http"
securityDefinitions:
  Authorization:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Bearer token for authentication"
paths:
  /login:
    post:
      tags:
        - "Common"
      summary: "User Login"
      operationId: "userLogin"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "loginData"
          description: "User login data"
          required: true
          schema:
            $ref: "#/definitions/LoginData"
      responses:
        200:
          description: "Login successful"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        401:
          description: "Unauthorized"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /register:
    post:
      tags:
        - "Visitor"
      summary: "User Registration"
      operationId: "userRegistration"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "userData"
          description: "User registration data"
          required: true
          schema:
            $ref: "#/definitions/RegistrationData"
      responses:
        200:
          description: "Registration successful"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /myTrainers:
    get:
      tags:
        - "Visitor"
      summary: "Get My Trainers"
      operationId: "getMyTrainers"
      security:
        - Authorization: []
      responses:
        200:
          description: "List of trainers associated with the user's sessions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trainer"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Visitor not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /mySessions:
    get:
      tags:
        - "Visitor"
      summary: "Get My Sessions"
      description: "Retrieve the sessions booked by the authenticated user."
      operationId: "getMySessions"
      security:
        - Authorization: []
      responses:
        200:
          description: "List of sessions booked by the user"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /book/{sessionId}:
    post:
      tags:
        - "Visitor"
      summary: "Book a Session"
      description: "Book a session by providing the session ID."
      operationId: "bookSession"
      security:
        - Authorization: []
      parameters:
        - name: "sessionId"
          in: "path"
          description: "ID of the session to book."
          required: true
          type: "string"
      responses:
        200:
          description: "Session booked successfully"
          schema:
            $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Session not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /unbook/{sessionId}:
    delete:
      tags:
        - "Visitor"
      summary: "Unbook a Session"
      description: "Unbook a session by providing the session ID."
      operationId: "unbookSession"
      security:
        - Authorization: []
      parameters:
        - name: "sessionId"
          in: "path"
          description: "ID of the session to unbook."
          required: true
          type: "string"
      responses:
        200:
          description: "Session unbooked successfully"
          schema:
            $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Session not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /trainer/mySessions:
    get:
      tags:
        - "Trainer"
      summary: "Get sessions created by the authenticated trainer or manager"
      description: "Allows authenticated trainers and managers to retrieve sessions they have created."
      operationId: "getMySessions"
      responses:
        200:
          description: "Sessions retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Session"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /sessions:
    get:
      tags:
        - "Visitor"
      summary: "Get sessions (for trainers and managers)"
      description: "Allows trainers and managers to retrieve a list of sessions."
      operationId: "getSessions"
      responses:
        200:
          description: "Sessions retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Session"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
    post:
      tags:
        - "Trainer"
      summary: "Create a Session"
      description: "Create a session if the authenticated user is a trainer."
      operationId: "createSession"
      security:
        - Authorization: []
      parameters:
        - name: "SessionData"
          in: "body"
          description: "Data for creating a new session"
          required: true
          schema:
            $ref: "#/definitions/CreateSessionData"
      responses:
        200:
          description: "Session created successfully"
          schema:
            $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /sessions/{sessionId}:
    put:
      tags:
        - "Trainer"
      summary: "Update a Session"
      description: "Update a session if the authenticated user is a trainer or manager."
      operationId: "updateSession"
      security:
        - Authorization: []
      parameters:
        - name: "sessionId"
          in: "path"
          description: "ID of the session to update."
          required: true
          type: "string"
        - name: "SessionUpdateData"
          in: "body"
          description: "Data for updating the session"
          required: true
          schema:
            $ref: "#/definitions/UpdateSessionData"
      responses:
        200:
          description: "Session updated successfully"
          schema:
            $ref: "#/definitions/Session"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Session not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /trainer/register:
    post:
      tags:
        - "Trainer"
      summary: "Register a new trainer"
      description: "Allows users to register as trainers."
      operationId: "registerTrainer"
      security:
        - Authorization: []
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Trainer registration data"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
              password:
                type: "string"
              name:
                type: "string"
              email:
                type: "string"
      responses:
        200:
          description: "Trainer registered successfully"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /visitors:
    get:
      tags:
        - "Trainer"
      summary: "Get Visitors"
      description: "Retrieve visitors if the authenticated user is a trainer or manager."
      operationId: "getVisitors"
      security:
        - Authorization: []
      responses:
        200:
          description: "List of visitors associated with the user's sessions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Visitor"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /manager/register:
    post:
      tags:
        - "Manager"
      summary: "Register a new manager"
      description: "Allows users to register as managers."
      operationId: "registerManager"
      security:
        - Authorization: []
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Manager registration data"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
              password:
                type: "string"
              name:
                type: "string"
              email:
                type: "string"
      responses:
        200:
          description: "Manager registered successfully"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /review/{sessionId}:
    post:
      tags:
        - "Visitor"
      summary: "Leave a session review"
      description: "Allows users to leave a review for a session."
      operationId: "leaveSessionReview"
      security:
        - Authorization: []
      parameters:
        - name: "sessionId"
          in: "path"
          description: "ID of the session to review."
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Review data"
          required: true
          schema:
            type: "object"
            properties:
              comment:
                type: "string"
              rating:
                type: "integer"
      responses:
        200:
          description: "Review submitted successfully"
          schema:
            $ref: "#/definitions/Review"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Session not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /addVisitor/{visitorId}/{sessionId}:
    post:
      tags:
        - "Trainer"
      summary: "Add a visitor to a session"
      description: "Allows trainers or managers to add visitors to sessions."
      operationId: "addVisitorToSession"
      security:
        - Authorization: []
      parameters:
        - name: "visitorId"
          in: "path"
          description: "ID of the visitor to add."
          required: true
          type: "string"
        - name: "sessionId"
          in: "path"
          description: "ID of the session to add the visitor to."
          required: true
          type: "string"
      responses:
        200:
          description: "Visitor added to session successfully"
          schema:
            $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Session not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /removeVisitor/{visitorId}/{sessionId}:
    delete:
      tags:
        - "Trainer"
      summary: "Remove a visitor from a session"
      description: "Allows trainers or managers to remove visitors from sessions."
      operationId: "removeVisitorFromSession"
      security:
        - Authorization: []
      parameters:
        - name: "visitorId"
          in: "path"
          description: "ID of the visitor to remove."
          required: true
          type: "string"
        - name: "sessionId"
          in: "path"
          description: "ID of the session to remove the visitor from."
          required: true
          type: "string"
      responses:
        200:
          description: "Visitor removed from session successfully"
          schema:
            $ref: "#/definitions/Session"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        403:
          description: "Forbidden"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Session not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal Server Error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
definitions:
  RegistrationData:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
  LoginData:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  Trainer:
    type: "object"
    properties:
      _id:
        type: "string"
      name:
        type: "string"
  Session:
    type: "object"
    properties:
      _id:
        type: "string"
      sessionId:
        type: "string"
      visitors:
        type: "array"
        items:
          type: "string"
      maxVisitors:
        type: "integer"
  CreateSessionData:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      date:
        type: "string"
        format: "date-time"
      maxVisitors:
        type: "integer"
  Visitor:
    type: "object"
    properties:
      _id:
        type: "string"
  SessionUpdateData:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Updated session name"
      maxVisitors:
        type: "integer"
        description: "Updated maximum number of visitors allowed in the session"
    required:
      - name
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
